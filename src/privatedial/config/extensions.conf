;-------------------------------- PrivateDial ----------------------------------
; Filename: extensions.conf
; This file is an Asterisk configuration file, part of the PrivateDial suite
; It is loaded by the pbx_config.so module.
;

;-------------------------------- general --------------------------------------
; This category loads include files.
;
; [general]
; #tryinclude extensions_local.conf

;-------------------------------- globals --------------------------------------
; Global options are defined in include files.
;
[globals]
CONTRY_CODE = 1
DIAL_TIMEOUT =,30

;-------------------------------- entry contexts -------------------------------
; Calls enter the dialplan in one of these entries
; Local additions to these entries are defined in include files.
;
[dp_entry_call_inout]
include => dp_lookup
include => dp_call_inout

exten => 9,1,Verbose(1, "Entering AI bridge")
 same => n,Stasis(asterisk-ai-bridge)         ; Invoke the ARI Stasis application
 same => n,Hangup()

[dp_entry_call_in]
include => dp_lookup
include => dp_call_in

[dp_entry_answer]
include => dp_lookup
include => dp_answer


;-------------------------------- action contexts ------------------------------

;-------------------------------- dp_lookup
; hints are placed here see hint_exten in pjsip_wizard.conf
;
; Rewrite E.123
; More than 6 characters and first is 0; assume national number so add + and country code
; More than 6 characters and first is 1-9, assume international number so add +
;
[dp_lookup]
exten => 1000,1,NoOp(Cannot rewrite local extension to E.123)
 same => n,Goto(${CONTEXT},${EXTEN},1)
exten => _0ZXXXXXX.,1,Goto(${CONTEXT},+${GLOBAL(CONTRY_CODE)}${EXTEN:1},1)
exten => _ZXXXXXX.,1,Goto(${CONTEXT},+${EXTEN},1)

[dp_call_inout]
exten => _[+0-9].,1,NoOp()
 same => n,Gosub(sub_dial_term,s,1(${HINT}))
 same => n,Gosub(sub_dial_trunk,${EXTEN},1(${HINT}))
 same => n,Hangup()

exten => 1000,1,NoOp()
 same => n,GoSub(sub_dial_term,s,1(PJSIP/chris))
 same => n,Hangup()

[dp_call_in]
exten => _[+0-9].,1,NoOp()
 same => n,Gosub(sub_dial_term,s,1(${HINT}))
 same => n,Hangup()

[dp_answer]
;DEVICE_STATE = UNKNOWN | NOT_INUSE | INUSE | BUSY | INVALID | UNAVAILABLE | RINGING | RINGINUSE | ONHOLD
exten => _[+0-9].,1,Goto(dev-${DEVICE_STATE(${HINT})})
 same => n(dev-NOT_INUSE),NoOp()
 same => n(dev-INUSE),NoOp()
 same => n(dev-RINGING),NoOp()
 same => n(dev-RINGINUSE),NoOp()
 same => n(dev-ONHOLD),NoOp()
 same => n(dev-UNAVAILABLE),NoOp()
 same => n,Answer()
 same => n(dev-UNKNOWN),NoOp()
 same => n(dev-INVALID),NoOp()
 same => n,Hangup()

[dp_hangup]
exten => _[+0-9].,1,Hangup()

;-------------------------------- subroutines ----------------------------------
; Syntax: Gosub(context,extension,priority(${ARG1},${ARG3},${ARG4}))
;

;-------------------------------- sub_dial_term
; Dial user subroutine for PJSIP
; Dial all pjsip contacts of an endpoint
; Usage: Gosub(sub_dial_term,s,1(${HINT}))
; ${ARG1} - pjsip tech/endpoint: ${HINT}, eg PJSIP/myuser
;
; Implementation details
; Dial all registered contacts of the endpoint. Return if there are none.
; Do not hangup, so that we can pass the call to sub_voicemail
;
[sub_dial_term]
exten => s,1,Set(LOCAL(endpoint)=${ARG1:6}) ; strip PJSIP/ from endpoint name
 same => n,Gotoif(${ISNULL(${endpoint})}?return:)
 same => n,Set(LOCAL(contacts)=${PJSIP_DIAL_CONTACTS(${endpoint})})
 same => n,Gotoif(${ISNULL(${contacts})}?return:)
 same => n,Verbose(2, "Call from CID: ${CALLERID(all)}, dialing all contacts of endpoint: ${endpoint}.")
 same => n,Dial(${contacts}${GLOBAL(DIAL_TIMEOUT)})
 same => n(return),Return()

;-------------------------------- sub_dial_trunk
; Dial trunk subroutine for PJSIP
; Usage: Gosub(sub_dial_trunk,${EXTEN},1(${HINT}))
; ${EXTEN} - Extension, eg 0046735698294
; ${ARG1} - pjsip tech/endpoint: ${HINT}, eg PJSIP/myuser
;
; Implementation details
; Dial EXTEN using ${TRUNK_ENDPOINT} which is defined in endpoint using set_var.
; In keeping with coding style, do not hangup.
; The channel variable ${TRUNK_ENDPOINT} holds the SIP trunk endpoint and
; needs be set on endpoints. This allows mutiple SIP trunk endpoints to be used.
;
[sub_dial_trunk]
exten => _[+0-9].,1,NoOP(Dialing out originating CID ${CALLERID(all)})
 same => n,Dial(PJSIP/${EXTEN}@${TRUNK_ENDPOINT})
 same => n(return),Return()
